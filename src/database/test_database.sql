PRAGMA FOREIGN_KEYS = ON;

/*Drop Tables*/

DROP TABLE IF EXISTS AgentDepartment;
DROP TABLE IF EXISTS Change;
DROP TABLE IF EXISTS Message;
DROP TABLE IF EXISTS TicketHashtag;
DROP TABLE IF EXISTS TicketAgent;
DROP TABLE IF EXISTS Ticket;
DROP TABLE IF EXISTS Hashtag;
DROP TABLE IF EXISTS Department;
DROP TABLE IF EXISTS Status;
DROP TABLE IF EXISTS Task;
DROP TABLE IF EXISTS FAQ;
DROP TABLE IF EXISTS Admin;
DROP TABLE IF EXISTS Agent;
DROP TABLE IF EXISTS User;

/*Create Tables*/

CREATE TABLE User (
    userID INTEGER PRIMARY KEY AUTOINCREMENT,
    firstname TEXT NOT NULL,
    lastname TEXT NOT NULL,
    username TEXT NOT NULL,
    password TEXT NOT NULL,
    email TEXT NOT NULL

);

CREATE TABLE Agent (
    userID INTEGER NOT NULL,

    FOREIGN KEY (userID) REFERENCES User(userID),
    CONSTRAINT PK_Agent PRIMARY KEY (userID)
);

CREATE TABLE Admin (
    userID INTEGER NOT NULL,

    FOREIGN KEY (userID) REFERENCES Agent(userID),
    CONSTRAINT PK_Admin PRIMARY KEY (userID)
);


CREATE TABLE FAQ (
    faqID INTEGER PRIMARY KEY AUTOINCREMENT,
    userID INTEGER NOT NULL,
    title TEXT NOT NULL,
    content TEXT NOT NULL,

    FOREIGN KEY (userID) REFERENCES Agent(userID)
);

CREATE TABLE Task (
    taskID INTEGER PRIMARY KEY AUTOINCREMENT,
    ticketID INTEGER,
    agentID INTEGER,
    content TEXT NOT NULL,

    FOREIGN KEY (agentID) REFERENCES Agent(userID),
    FOREIGN KEY (ticketID) REFERENCES Ticket(ticketID)
);

CREATE TABLE Status (
    statusID INTEGER PRIMARY KEY AUTOINCREMENT,
    adminID INTEGER NOT NULL,
    name TEXT NOT NULL,

    FOREIGN KEY (adminID) REFERENCES Admin(userID)
);

CREATE TABLE Department (
    departmentID INTEGER PRIMARY KEY AUTOINCREMENT,
    adminID INTEGER NOT NULL,
    name TEXT NOT NULL,

    FOREIGN KEY (adminID) REFERENCES Admin(userID)
);

CREATE TABLE Hashtag (
    hashtagID INTEGER PRIMARY KEY AUTOINCREMENT,
    adminID INTEGER NOT NULL,
    name TEXT NOT NULL,

    FOREIGN KEY (adminID) REFERENCES Admin(userID)
);

CREATE TABLE Ticket (
    ticketID INTEGER PRIMARY KEY AUTOINCREMENT,
    clientID INTEGER NOT NULL,
    department TEXT NOT NULL,
    status_name TEXT NOT NULL,
    title TEXT NOT NULL,
    priority INTEGER NOT NULL,
    da DATETIME NOT NULL,

    FOREIGN KEY (clientID) REFERENCES User(userID),
    FOREIGN KEY (department) REFERENCES Department(name),
    FOREIGN KEY (status_name) REFERENCES Status(name)
);

CREATE TABLE TicketAgent (
    ticket_agentID INTEGER PRIMARY KEY AUTOINCREMENT,
    ticketID INTEGER NOT NULL,
    agentID INTEGER NOT NULL,

    FOREIGN KEY (ticketID) REFERENCES Ticket(ticketID),
    FOREIGN KEY (agentID) REFERENCES Agent(userID)
);

CREATE TABLE TicketHashtag (
    ticket_hashtagID INTEGER PRIMARY KEY AUTOINCREMENT,
    ticketID INTEGER NOT NULL,
    hashtagID INTEGER NOT NULL,

    FOREIGN KEY (ticketID) REFERENCES Ticket(ticketID),
    FOREIGN KEY (hashtagID) REFERENCES Hashtag(hashtagID)
);

CREATE TABLE Message (
    messageID INTEGER PRIMARY KEY AUTOINCREMENT,
    userID INTEGER NOT NULL,
    ticketID INTEGER NOT NULL,
    da DATETIME NOT NULL,
    content TEXT NOT NULL,

    FOREIGN KEY (userID) REFERENCES User(userID),
    FOREIGN KEY (ticketID) REFERENCES Ticket(ticketID)
);

CREATE TABLE Change (
    changeID INTEGER PRIMARY KEY AUTOINCREMENT,
    agentID INTEGER NOT NULL,
    ticketID INTEGER NOT NULL,
    da DATETIME NOT NULL,
    content TEXT NOT NULL,

    FOREIGN KEY (agentID) REFERENCES Agent(userID),
    FOREIGN KEY (ticketID) REFERENCES Ticket(ticketID) 
);


CREATE TABLE AgentDepartment (
    agent_departmentID INTEGER PRIMARY KEY AUTOINCREMENT,
    agentID INTEGER NOT NULL,
    departmentID INTEGER NOT NULL,

    FOREIGN KEY (agentID) REFERENCES Agent(userID),
    FOREIGN KEY (departmentID) REFERENCES Department(departmentID)
);
